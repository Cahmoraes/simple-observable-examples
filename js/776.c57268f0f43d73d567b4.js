(self.webpackChunkrevisao_10_02_2021=self.webpackChunkrevisao_10_02_2021||[]).push([[776,173],{776:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>d});var s=t(575),i=t.n(s),a=t(913),o=t.n(a),r=t(898),u=t(173),l=t.n(u),d=function(){function e(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:document.getElementById("root");i()(this,e),this._root=n,this._btnCadastrar=null,this._input_1=null,this._$memo_1=r.Z.memo(),this._output_1=null,this._config={title:"Memo Observable",label_1:"Digite um valor para memorizar:",label_2:"Memorizar",label_3:"Valor memorizado:",label_4:"Release",input_1:"input_1",output_1:"output_1",btnCadastrar:"btnCadastrar",btnRelease:"btnRelease"}}return o()(e,[{key:"getElements",value:function(){this._input_1=document.getElementById(this._config.input_1),this._btnRelease=document.getElementById(this._config.btnRelease),this._btnCadastrar=document.getElementById(this._config.btnCadastrar),this._output_1=document.getElementById(this._config.output_1)}},{key:"subscribeObservable",value:function(){var e=this;this._$memo_1.subscribe((function(n){e._output_1.textContent=n}))}},{key:"addEventListenerInputs",value:function(){var e=this;this._btnCadastrar.addEventListener("click",(function(){e._$memo_1(e._input_1.value)})),this._btnRelease.addEventListener("click",(function(){e._$memo_1.release()}))}},{key:"render",value:function(){this._root.insertAdjacentHTML("beforeend",l()(this._config))}},{key:"init",value:function(){return this.render(),this.getElements(),this.subscribeObservable(),this.addEventListenerInputs(),this}}]),e}()},173:e=>{function n(){return`<div class="content">\n  <h2 class="subtitle">${this.title}</h2>\n  <div id="computedObservbale">\n    <div class="container-fluid">\n      <div class="grid-12">\n        <section class="row">\n          <div class="grid-12 description">\n            <h3>Sintaxe</h3>\n            <pre class="code">\n              const $memo = so.memo(param)\n            </pre>\n            <p>Cria um observable que memoriza seus valores e só é computado quando receber um novo parâmetro. Ou seja, ele só notificará seus inscritos quando receber um parâmetro diferente de seus parâmetros anteriores.</p>\n            <h3>Params</h3>\n            <p>\n              param: String, Number, Object, null, Function.<br>\n              Valor inicial do observable.\n            </p>\n            <p>\n              O memoObservable pode ser iniciado ou atualizado com uma função que obrigatóriamente deve retornar um valor, o valor retornado será atribuído ao valor do Observable.<br>\n              Se o obervable for iniciado com uma função que não possui retorno, seu valor será a prória função.\n            </p>\n            <p>\n              O memoObservable possui as mesmas características do Observable, entretanto não possui função de middleware.\n            </p>\n            <h3>Métodos</h3>\n            <h4>release()</h4>\n            <p>Limpa todo o cache do memoObservable</p>\n            <pre class="code">\n                $memo.release()\n            </pre>\n          </div>\n        </section>\n        <section class="row examples">\n          <div class="grid-12">\n            <div class="form-group">\n              <label for="input_1">${this.label_1}:</label>\n              <input type="text" id="${this.input_1}" name="${this.input_1}">\n            </div>\n            <div class="form-group">\n              <button id="${this.btnCadastrar}" name="${this.btnCadastrar}">\n                ${this.label_2}\n              </button>\n            </div>\n            <div class="form-group">\n              <button id="${this.btnRelease}" name="${this.btnRelease}">\n                ${this.label_4}\n              </button>\n            </div>\n          </div>\n          <div class="grid-12">\n            <p>${this.label_3}</p>\n            <span id="${this.output_1}"></span>\n          </div>\n        </section>\n      </div>\n    </div>\n  </div>\n</div>`}e.exports=function(e){return n.call(e,e)}}}]);