(self.webpackChunkrevisao_10_02_2021=self.webpackChunkrevisao_10_02_2021||[]).push([[458,302],{458:(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>d});var a=n(575),r=n.n(a),t=n(913),s=n.n(t),l=(n(898),n(302)),i=n.n(l),d=function(){function e(){var o=arguments.length>0&&void 0!==arguments[0]?arguments[0]:document.getElementById("root");r()(this,e),this._root=o,this._config={title:"Middleware"}}return s()(e,[{key:"getElements",value:function(){}},{key:"addEventListenerInputs",value:function(){}},{key:"render",value:function(){this._root.insertAdjacentHTML("beforeend",i()(this._config))}},{key:"init",value:function(){return this.render(),this.getElements(),this}}]),e}()},302:e=>{function o(){return`<div class="content">\n  <h2 class="subtitle">${this.title}</h2>\n  <article id="middleware">\n    <div class="container-fluid">\n      <div class="grid-12">\n        <section class="row">\n          <div class="grid-12 description">\n            <h3>Sintaxe</h3>\n            <pre class="code">\n              function middleware(prevValue, newValue, next) { <br>\n                console.log(prevValue) // 1 <br>\n                console.log(newValue) // 2 <br>\n                console.log(newValue()) // 2 <br>\n              } <br>\n              const $obs = so.obervable(1) <br>\n              $obs(2) <br>\n            </pre>\n            <p>Funções middleware interceptam quando o observable sofre uma mudança. Com isso é possível realizar um side-effect durante a atualização do observable, além de interceptar e transformar o valor do observable.</p>\n            <h3>Parâmetros</h3>\n            <p><strong>prevValue:</strong> Valor anterior do observable</p>\n            <p><strong>newValue:</strong> Novo valor passado para o observable</p>\n            <p><strong>next:</strong> Função que ao ser executada, atualizará o valor do observable para o novo valor e retornará o novo valor atualizado. Se nada for passado para ela: next(), apenas atualizará o valor do observable com o newValue. Se for passado algum parâmtro, atualizará o valor do observable com o valor do parâmetro: next(3).</p>\n          </div>\n        </section>\n      </div>\n    </div>\n  </article>\n</div>`}e.exports=function(e){return o.call(e,e)}}}]);