(self.webpackChunkrevisao_10_02_2021=self.webpackChunkrevisao_10_02_2021||[]).push([[489,79],{937:(e,n,t)=>{"use strict";t.d(n,{B:()=>i});var i=function(e){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return function(t,i){var o=null;return Object.defineProperty(t,i,{get:function(){return o||n?!o&&n&&(o=document.querySelectorAll(e)):o=document.querySelector(e),o}})}}},724:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>b});var i=t(575),o=t.n(i),a=t(913),s=t.n(a),r=t(898),u=t(79),l=t.n(u),c=t(140),d=t(937),b=function(){function e(){var n=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:document.getElementById("root");o()(this,e),this._root=t,c.Z.property(this,{_input_1:(0,d.B)("#input_1"),_input_2:(0,d.B)("#input_2"),_computedValue:(0,d.B)("#computed_value")}),this._$obs_1=r.Z.observable(""),this._$obs_2=r.Z.observable(""),this._$computed=r.Z.computed((function(){return"".concat(n._$obs_1()," ").concat(n._$obs_2())}),[this._$obs_1,this._$obs_2,{}]),this._config={title:"Computed Observable",label_1:"Nome",label_2:"Sobrenome",label_3:"Valor computado"}}return s()(e,[{key:"subscribeObservable",value:function(){var e=this;this._$computed.subscribe((function(n){e._computedValue.textContent=n}))}},{key:"addEventListenerInputs",value:function(){var e=this;this._input_1.addEventListener("input",(function(n){var t=n.target.value;e._$obs_1(t)})),this._input_2.addEventListener("input",(function(n){var t=n.target.value;e._$obs_2(t)}))}},{key:"render",value:function(){this._root.insertAdjacentHTML("beforeend",l()(this._config))}},{key:"init",value:function(){return this.render(),this.subscribeObservable(),this.addEventListenerInputs(),this}}]),e}()},79:e=>{function n(){return`<div class="content">\n  <h2 class="subtitle">${this.title}</h2>\n  <div id="computedObservbale">\n    <div class="container-fluid">\n      <div class="grid-12">\n        <section class="row">\n          <div class="grid-12 description">\n            <h3>Sintaxe</h3>\n            <pre class="code">\n                const $computed = so.computedObservable(function,[...obervable])\n              </pre>\n            <p>Cria um observable que retorna um valor computado.</p>\n            <p>O Computed Observable é um observable cujo valor é calculado com base nos valores de outros observables.</p>\n            <p>Cada obeservable alterado no array de dependências, atualizará o valor do obervable computado.</p>\n            <h3>Params</h3>\n            <p>\n              fuction => Função que será executada toda vez que alguma dependência atualizar.<br>\n              observable[] => Array de observables.\n            </p>\n          </div>\n        </section>\n        <section class="row">\n          <div class="grid-12">\n            <div class="form-group">\n              <label for="input_1">${this.label_1}:</label>\n              <input type="text" id="input_1" name="input_1">\n            </div>\n            <div class="form-group">\n              <label for="input_2">${this.label_2}:</label>\n              <input type="text" id="input_2" name="input_2">\n            </div>\n          </div>\n          <div class="grid-12">\n            <span>${this.label_3}:</span>\n            <p id="computed_value" class="word-break"></p>\n          </div>\n        </section>\n      </div>\n    </div>\n  </div>\n</div>`}e.exports=function(e){return n.call(e,e)}}}]);