(self.webpackChunkrevisao_10_02_2021=self.webpackChunkrevisao_10_02_2021||[]).push([[489,79],{724:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>d});var i=n(575),s=n.n(i),a=n(913),u=n.n(a),o=n(898),r=n(79),l=n.n(r),d=function(){function e(){var t=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:document.getElementById("root");s()(this,e),this._root=n,this._btnCadastrar=null,this._input_1=null,this._input_2=null,this._computedValue=null,this._$obs_1=o.Z.observable(""),this._$obs_2=o.Z.observable(""),this._$computed=o.Z.computed((function(){return"".concat(t._$obs_1()," ").concat(t._$obs_2())}),[this._$obs_1,this._$obs_2,{}]),this._config={title:"Computed Observable",label_1:"Nome",label_2:"Sobrenome",label_3:"Valor computado"}}return u()(e,[{key:"getElements",value:function(){this._input_1=document.getElementById("input_1"),this._input_2=document.getElementById("input_2"),this._computedValue=document.getElementById("computed-value")}},{key:"subscribeObservable",value:function(){var e=this;this._$computed.subscribe((function(t){return e._computedValue.textContent=t}))}},{key:"addEventListenerInputs",value:function(){var e=this;this._input_1.addEventListener("input",(function(t){var n=t.target.value;e._$obs_1(n)})),this._input_2.addEventListener("input",(function(t){var n=t.target.value;e._$obs_2(n)}))}},{key:"render",value:function(){this._root.insertAdjacentHTML("beforeend",l()(this._config))}},{key:"init",value:function(){return this.render(),this.getElements(),this.subscribeObservable(),this.addEventListenerInputs(),this}}]),e}()},79:e=>{function t(){return`<div class="content">\n  <h2 class="subtitle">${this.title}</h2>\n  <div id="computedObservbale">\n    <div class="container-fluid">\n      <div class="grid-12">\n        <section class="row">\n          <div class="grid-12 description">\n            <h3>Sintaxe</h3>\n            <pre class="code">\n              const $computed = so.computedObservable(function,[...obervable])\n            </pre>\n            <p>Cria um observable que retorna um valor computado.</p>\n            <p>Cada obeservable alterado no array de dependências, atualizará o valor do obervable computado.</p>\n            <h3>Params</h3>\n            <p>\n              fuction => Função que será executada toda vez que alguma dependência atualizar.<br>\n              observable[] => Array de observables.\n            </p>\n          </div>\n        </section>\n        <div class="form-group">\n          <label for="input_1">${this.label_1}:</label>\n          <input type="text" id="input_1" name="input_1">\n        </div>\n        <div class="form-group">\n          <label for="input_2">${this.label_2}:</label>\n          <input type="text" id="input_2" name="input_2">\n        </div>\n      </div>\n      <div class="grid-12">\n        <span>${this.label_3}:</span>\n        <p id="computed-value"></p>\n      </div>\n    </div>\n  </div>\n</div>`}e.exports=function(e){return t.call(e,e)}}}]);