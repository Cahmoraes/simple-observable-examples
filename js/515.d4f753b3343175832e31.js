(self.webpackChunkrevisao_10_02_2021=self.webpackChunkrevisao_10_02_2021||[]).push([[515,41],{937:(e,n,o)=>{"use strict";o.d(n,{B:()=>r});var r=function(e){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return function(o,r){var a=null;return Object.defineProperty(o,r,{get:function(){return a||n?!a&&n&&(a=document.querySelectorAll(e)):a=document.querySelector(e),a}})}}},515:(e,n,o)=>{"use strict";o.r(n),o.d(n,{default:()=>p});var r=o(575),a=o.n(r),s=o(913),i=o.n(s),t=o(140),l=o(898),b=o(937),c=o(41),u=o.n(c),p=function(){function e(){var n=this,o=arguments.length>0&&void 0!==arguments[0]?arguments[0]:document.getElementById("root");a()(this,e),this._root=o,this._$obs_1=l.Z.observable(0),this._$computedInicial=l.Z.computed((function(){return n._$obs_1.initialValue}),[this._$obs_1]),this._$computedPrev=l.Z.computed((function(){return n._$obs_1.prevValue}),[this._$obs_1]),t.Z.property(this,{_button_1:(0,b.B)("#button_1"),_inicialValue:(0,b.B)("#inicialValue"),_prevValue:(0,b.B)("#prevValue")}),this._config={title:"Observable",button_1:"button_1"}}return i()(e,[{key:"render",value:function(){this._root.insertAdjacentHTML("beforeend",u()(this._config))}},{key:"addEventListener",value:function(){var e=this;this._button_1.addEventListener("click",(function(){e._$obs_1(e._$obs_1()+1)}))}},{key:"subscribeObservable",value:function(){var e=this;this._$obs_1.subscribe((function(n){e._button_1.textContent="Valor atual: (".concat(n,")")})),this._$computedInicial.subscribe((function(n){e._inicialValue.textContent="Valor inicial: (".concat(n,")")})),this._$computedPrev.subscribe((function(n){e._prevValue.textContent="Valor anterior: (".concat(n,")")}))}},{key:"init",value:function(){return this.render(),this.addEventListener(),this.subscribeObservable(),this}}]),e}()},41:e=>{function n(){return`<div class="content">\n  <h2 class="subtitle">${this.title}</h2>\n  <article id="observable">\n    <div class="container-fluid">\n      <div class="grid-12">\n        <section class="row">\n          <div class="grid-12 description">\n            <h3>Sintaxe</h3>\n            <pre class="code">\n                const $observable = so.observable(param [,function])\n              </pre>\n            <p>Cria um observable.</p>\n            <h3>Parâmetros</h3>\n            <p>\n              param: String, Number, Object, null, Function.<br>\n              Valor inicial do observable.\n            </p>\n            <p>\n              O observable pode ser iniciado ou atualizado com uma função que obrigatóriamente deve retornar um valor, o valor retornado será atribuído ao valor do Observable.<br>\n              Se o obervable for iniciado com uma função que não possui retorno, seu valor será a prória função.\n            </p>\n            <p>\n              Quando um Obervable for atualizado, ele pode receber uma função de callback. Esta função receberá como parâmetro o valor atual do obervable.<br>\n              Se a função de callback não tiver um retorno, o valor permanecerá com o valor atual.\n            </p>\n            <pre class="code">\n              const $obs = so.observable(() => 1) <br>\n              console.log($obs()) // 1 <br>\n              $obs((currentValue) => currentValue + 2) <br>\n              console.log($obs()) // 3 <br>\n              $obs((currentValue) => { <br>\n                <span class="tab_2">console.log(currentValue + 1) //4 </span>\n              }) <br>\n              console.log($obs()) // 3 <br>\n            </pre>\n            <p>\n              function: Função Middleware. Intercepta todas as mudanças de valor no Observable.<br>\n              Para saber mais sobre Middleware, acesse: <a is="app-link" href="/middleware">Middleware</a>.\n            </p>\n            <h3>Métodos</h3>\n            <h4>subscribe(function)</h4>\n            <p>Inscreve no Observable, recebe uma função de callback e retorna uma inscrição.</p>\n            <pre class="code">\n                const subscription = $observable.subscribe(value => value.toUpperCase())<br>\n                subscription.dispose() // cancela a inscrição.\n            </pre>\n            <h4>pipe(...function)</h4>\n            <p>Pipe é um operador de trasformação. Recebe uma ou mais funções por parâmetros e retorna um observable.</p>\n            <p>\n              Cada função deve receber um parâmetro que será o valor do observable e retornar o valor transformado que será passado para a próxima função. Ao término, o mesmo observable será retornado, porém com seu valor transformado pelas Pipeable Functions.\n            </p>\n            <pre class="code">\n              const $obs = so.observable(3)<br>\n              $obs.pipe(\n                <span class="tab_2">(value) => value * 10,</span>\n                <span class="tab_2">(value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })</span>\n              ).subscribe(console.log)<br>\n              // R$ 30,00\n            </pre>\n            <h3>Propriedades</h3>\n            <h4>prevValue</h4>\n            <p>Retorna o valor anterior observable.</p>\n            <h4>initialValue</h4>\n            <p>retorna o valor inicial do observable.</p>\n            <pre class="code">\n                const $observable = so.observable(1)<br>\n                $observable(3) <br>\n                $observable(5) <br>\n                console.log($observable.prevValue) // 3 <br>\n                console.log($observable.initialValue) // 1 <br>\n              </pre>\n            \x3c!-- <h4>pipe(...fn)</h4>\n            <p>Retorna um Pipeable Obseravable. Recebe uma ou mais funções que vão transformar o valor do observable sempre que ele for exibido.</p>\n            <pre class="code">\n                const $pipeable = $observable.pipe(fn1, fn2, fn3)\n              </pre>\n            <p>\n              Clique aqui para mais informações sobre\n              <a is="app-link" href="/pipeableobservable">Pipeable Observable</a>.\n            </p> --\x3e\n          </div>\n        </section>\n        <section class="row examples">\n          <div class="grid-12">\n            <button id="${this.button_1}"></button>\n          </div>\n          <div class="grid-12 MT10">\n            <div class="row">\n              <div class="grid-6">\n                <p id="inicialValue"></p>\n              </div>\n              <div class="grid-6">\n                <p id="prevValue"></p>\n              </div>\n            </div>\n          </div>\n        </section>\n      </div>\n    </div>\n  </article>\n</div>`}e.exports=function(e){return n.call(e,e)}}}]);